<h1>Technical Details</h1>

<h2>Introduction</h2>
<p>CSGSI Stat Trakr is my backend project I created while finishing up at <a target="_blank" href="http://nashvillesoftwareschool.com/">Nashville Software School</a>. It is a solo endeavor and is quite vast for me. The project is comprised of three major pieces. An <a target="_blank" href="https://github.com/jasonfigueroa/CSGSI-API">API</a>, a <a target="_blank" href="https://github.com/jasonfigueroa/CSGITest">desktop application</a> and <a target="_blank" href="https://github.com/jasonfigueroa/CSGSIWebClientDemo">web client application</a>. The desktop application captures statistical data while a user plays <a target="_blank" href="http://store.steampowered.com/app/730/CounterStrike_Global_Offensive/">Counter-Strike: Global Offensive</a> and sends that data to an API which stores the data in a database. The user can later access that data via a web client application.</p>

<h2>Desktop App</h2>
<p>The desktop application is a console application implemented in .NET 4.5 which leverages <a target="_blank" href="https://github.com/rakijah/CSGSI">CSGSI</a>, a small C# library written by rakijah which allows users to interface with Counter-Strike: Global Offensive’s Game State Integration. The library listens to network traffic between the game client and the game server and captures data representing the state of the game at a given moment.</p>
<p>The console application routes the data captured to the project’s API.</p>

<h2>API</h2>
<p>The API is implemented in <a target="_blank" href="https://www.python.org/downloads/">Python 3.6</a> and <a target="_blank" href="http://flask.pocoo.org/">Flask</a>, a Python micro web framework created by <a target="_blank" href="http://lucumr.pocoo.org/about/">Armin Ronacher</a> which takes a more minimal approach compared to other frameworks. The API speaks to a <a target="_blank" href="https://www.sqlite.org/index.html">SQLite3</a> database and leverages many Flask extensions including Flask-CORS, Flask-SQLAlchemy, Flask-JWT and Flask-RESTful.</p>
<p><a target="_blank" href="https://flask-cors.readthedocs.io/en/latest/">Flask-CORS</a> is an extension for handling Cross Origin Resource Sharing. This is needed to facilitate the consumption of the API from resource on another domain. For example, the web client associated with this project.</p>
<p><a target="_blank" href="https://pythonhosted.org/Flask-JWT/">Flask-JWT</a> is an extension used for securing endpoints and issuing JSON Web Tokens in order to grant access to those endpoints.</p>
<p><a target="_blank" href="http://flask-sqlalchemy.pocoo.org/2.3/">Flask-SQLAlchemy</a> is an extension allowing the use of SQLAlchemy in Flask applications. SQLAlchemy is an extremely popular SQL toolkit and object-relational mapper (ORM) for Python developers. ORMs are used to map elements in databases to classes in object-oriented languages. This allows developers to visualize the data as classes instead of tables in a database. ORMs also streamline operations such as data migrations, creating data, reading data, updating data, and deleting data. These features abstract away tedious database operations and help developers stay focused on programming.</p>
<p><a target="_blank" href="https://flask-restful.readthedocs.io/en/latest/">Flask-RESTFul</a> is an extension authored by <a target="_blank" href="https://www.twilio.com/">Twilio</a> designed to aid rapid development of REST APIs.</p>

<h2>Web App</h2>
<p>The web client is implemented in <a target="_blank" href="https://docs.microsoft.com/en-us/aspnet/core/getting-started">ASP.NET Core 2</a>. It has no database and feeds solely on the API. So far, it uses very little JavaScript beyond what is included with <a target="_blank" href="http://getbootstrap.com/docs/3.3/">Bootstrap 3.3.7</a>. Instead of opting for a JavaScript framework for the view I stuck with <a target="_blank" href="https://docs.microsoft.com/en-us/aspnet/core/mvc/razor-pages/?tabs=visual-studio">Razor Templates</a>. The API portion of this project took me away from .NET, the backend technology my cohort focused on and I still wanted to dig into the .NET framework and C#. Also, I really enjoyed Razor Templates I think they integrate really well with ASP.NET Core 2. Also, Visual Studio’s debugging capabilities made it a breeze to work with ASP.NET Core 2 and Razor Templates.</p>
<p>Due to the lack of a database associated directly to the web client I had to get a little creative in order to “persist” some data and simulate a login. There is no actual authentication handled by the web client. The authentication is handled by the API via JSON Web Tokens. I had to create a service that would persist throughout an instance of the application and inject it at key locations of the application. The service has a custom data structure to help describe the state of the user while using the application.</p>

<h2>Conclusion</h2>
<p>The project has been a wonderful learning experience. It really pushed me learn a lot and quickly. For example, had I opted for a full blown ASP.NET Core 2 web application I would have never experienced the challenges that come with integrating a Python/Flask API with a ASP.NET Core 2 application. Also, I have been a Flask and SQLAlchemy fan for a really long time and this project presented the opportunity to build my first real project with these technologies. I hope to continue to expand the project.</p>